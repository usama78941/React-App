{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","singleMonster","key","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","catch","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qTAGaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACR,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCJbC,G,MAAW,SAACR,GAAD,OACpB,yBAAKC,UAAU,aAEPD,EAAMI,QAAQK,KAAI,SAAAC,GAAa,OAC3B,kBAAC,EAAD,CAAMC,IAAKD,EAAcL,GAAID,QAASM,UCLzCE,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,yBAAKb,UAAU,UACX,2BAAOc,KAAK,SACLC,YAAaH,EACbI,SAAUH,OCoCVI,G,wDA5BX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IAOVc,aAAe,SAACK,GACX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACTC,SAAU,GACVJ,YAAa,IAJF,E,gEAPE,IAAD,OAChBK,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,OACvCC,OAAM,kBAAMC,QAAQC,IAAR,+B,8CAeX,IAAD,SAC2BC,KAAKV,MAA9BC,EADF,EACEA,SAAUJ,EADZ,EACYA,YACXc,EAAmBV,EAASW,QAAO,SAAA1B,GAAa,OAClDA,EAAcJ,KAAK+B,cAAcC,SAASjB,EAAYgB,kBAE1D,OACI,yBAAKpC,UAAU,OACX,wBAAIA,UAAU,MAAd,oBACA,kBAAC,EAAD,CAAWa,aAAc,SAAAK,GAAC,OAAI,EAAKL,aAAaK,IACrCN,YAAY,oBACvB,kBAAC,EAAD,CAAUT,QAAS+B,S,GA/BjBI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.d5463f26.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt='monster'\r\n             src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from \"react\";\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.style.css'\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {\r\n            props.monster.map(singleMonster => (\r\n                <Card key={singleMonster.id} monster={singleMonster}/>\r\n            ))\r\n        }\r\n    </div>\r\n);","import React from \"react\";\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = ({placeHolder, handleChange}) => (\r\n    <div className='search'>\r\n        <input type='search'\r\n               placeholder={placeHolder}\r\n               onChange={handleChange}\r\n        />\r\n    </div>\r\n);","import React, {Component} from \"react\";\r\nimport {CardList} from \"./components/card-list/card-list.component\";\r\nimport {SearchBox} from \"./components/search-box/search-box.component\";\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({monsters: users}))\r\n            .catch(() => console.log(`The error is below: `))\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            monsters: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        (this.setState({searchField: e.target.value}))\r\n    } // this is an arrow function that does not require us to bind the scope of  'this' to 'this'\r\n\r\n    render() {\r\n        const {monsters, searchField} = this.state;\r\n        const filteredMonsters = monsters.filter(singleMonster =>\r\n            singleMonster.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n        return (\r\n            <div className='App'>\r\n                <h1 className='h1'>Monsters Rolodex</h1>\r\n                <SearchBox handleChange={e => this.handleChange(e)}\r\n                           placeHolder='Search Monsters'/>\r\n                <CardList monster={filteredMonsters}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}